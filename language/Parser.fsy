%{

open AST

%}

// The start token becomes a parser function in the compiled code:
%start start

// Regular tokens
%token LET SEPERATOR ECHO LCB RCB UNIT DOT COLON WITH REC TYPE TYPE_ALIAS PIPE LAB RAB BT DLAB DRAB
%token ARROW LPAR RPAR LSQBR RSQBR COMMA EXTENDS
%token EQUALS NOT BIGGER SMALLER
%token PLUS MIN TIMES DIVIDE
%token QUESTION ELSE AND OR
%token < string > ID
%token < string > STRING
%token < int32 > INT
%token < bool > BOOL
%token EOF
%token OPEN

// This is the type of the data produced by a successful reduction of the 'start'
// symbol:
%type < Expression list > start

%%

// These are the rules of the grammar along with the F# code of the
// actions executed as rules are reduced.
start: program EOF { $1 }

program:
  | root_expression                                               { [$1] }
  | root_expression program                                       { $1 :: $2 }

atomic:
  | INT                                                           { Int $1 }
  | BOOL                                                          { Bool $1 }
  | UNIT                                                          { Unit () }
  | STRING                                                        { String $1 }

root_expression:
  | expression                                                    { $1 }
  | type_alias                                                    { $1 }

expression:
  | LET ID TYPE typing EQUALS expression0                         { Write ($2, $6, false, Some $4) }
  | LET ID EQUALS expression0                                     { Write ($2, $4, false, None) }
  | LET REC ID TYPE typing EQUALS expression0                     { Write ($3, $7, true, Some $5) }
  | LET REC ID EQUALS expression0                                 { Write ($3, $5, true, None) }
  | ECHO expression0                                              { Echo $2 }
  | expression0                                                   { $1 }

expression0:
  | OPEN ID                                                       { Open $2 }
  | expression0 AND expression1                                   { And ($1, $3) }
  | expression0 OR expression1                                    { Or ($1, $3) }
  | expression1                                                   { $1 }

expression1:
  | expression1 QUESTION expression1 COLON expression1            { Condition ($1, $3, $5) }
  | expression1 EQUALS EQUALS expression2                         { Equals ($1, $4)}
  | expression1 NOT EQUALS expression2                            { NotEquals ($1, $4)}
  | expression2                                                   { $1 }

expression2:
  | expression2 PLUS expression3                                  { Plus ($1, $3) }
  | expression2 MIN expression3                                   { Min ($1, $3) }
  | expression3                                                   { $1 }

expression3:
  | expression3 TIMES expression4                                 { Times ($1, $3) }
  | expression3 DIVIDE expression4                                { Divide ($1, $3) }
  | expression4                                                   { $1 }

expression4:
  | lambda                                                        { $1 }
  | expression4 DOT LSQBR expression1 RSQBR                       { ArrayGet ($1, $4) }
  | typing LSQBR expr_list RSQBR                                  { ArrayInit ($3, $1) }
  | typing LSQBR RSQBR                                            { ArrayInit ([], $1) }
  | expression4 DOT ID                                            { ObjectGet ($1, $3) }
  | expression4 LPAR expression1 RPAR                             { Apply ($1, List.Empty, $3) }
  | expression4 LAB typing_list RAB LPAR expression1 RPAR         { Apply ($1,  $3, $6) }
  | atomic                                                        { Value $1 }
  | ID                                                            { Read $1 }
  | LCB prop_list RCB                                             { ObjectInit $2 }
  | LCB expression4 WITH ID COLON expression1 RCB                 { ObjectCopyWith ($2, ($4, $6))} 
  | LCB expression RCB                                            { Nested $2 }

expr_list:
  | expression                                                    { [$1] }
  | expression COMMA expr_list                                    { $1 :: $3 }

prop_list: 
  | ID COLON expression1                                          { [($1, $3)] }
  | ID COLON expression1 COMMA prop_list                          { ($1, $3) :: $5 }

lambda:
  | LPAR ID TYPE typing RPAR ARROW LCB program RCB                          { Lambda ($2, $4, Map.empty, $8)}
  | LAB type_arg_list RAB LPAR ID TYPE typing RPAR ARROW LCB program RCB    { Lambda ($5, $7, $2, $11)}
  | LPAR ID TYPE typing RPAR ARROW expression                               { Lambda ($2, $4, Map.empty, [$7])}
  | LAB type_arg_list RAB LPAR ID TYPE typing RPAR ARROW expression0        { Lambda ($5, $7, $2, [$10])}

type_arg_list:
  | ID TYPE typing                                                { Map.ofList [($1, Some $3)] }
  | ID                                                            { Map.ofList [($1, None)] }
  | ID TYPE typing COMMA type_arg_list                            { $5.Add ($1, Some $3)}
  | ID COMMA type_arg_list                                        { $3.Add ($1, None)}

typing: 
  | ID                                                            { NamedType $1 }
  | STRING                                                        { StringLiteral $1 |> LiteralType }
  | BOOL                                                          { BoolLiteral $1 |> LiteralType }
  | INT                                                           { IntLiteral $1 |> LiteralType }
  | UNIT                                                          { LiteralType UnitLiteral }
  | typing ARROW typing                                           { FuncType ($1, Map.empty, $3) }
  | LPAR typing RPAR                                              { NestedType $2 }
  | typing LSQBR RSQBR                                            { ArrayType $1}
  | LCB prop_type_list RCB                                        { ObjectType $2 }
  | type_union                                                    { UnionType $1 }
  | ID DLAB typing_list DRAB                                      { AppliedType ($3, $1) }
  | typing EXTENDS typing QUESTION typing COLON typing            { ConditionalType ($1, $3, $5, $7)}

prop_type_list:
  | ID COLON typing                                               { [($1, $3)] }
  | ID COLON typing COMMA prop_type_list                          { ($1, $3) :: $5 }

typing_list:
  | typing                                                        { [$1] }
  | typing COMMA typing_list                                      { $1 :: $3 }

type_union:
  | PIPE typing                                                   { [$2] }
  | typing type_union                                             { $1 :: $2 }

type_alias:
  | TYPE_ALIAS ID EQUALS typing                                   { TypeAlias ($2, $4) }
  | TYPE_ALIAS ID LAB type_arg_list RAB EQUALS typing             { TypeAlias ($2, ArgumentedType ($4, $7)) }